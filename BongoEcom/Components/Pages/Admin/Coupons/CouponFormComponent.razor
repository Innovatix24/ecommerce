@page "/admin/coupons/edit/{CouponId:int}"
@page "/admin/coupons/create"

@rendermode InteractiveServer

@using Application.Features.Coupons.Commands
@using Application.Features.Coupons.Queries
@using Application.Features.Orders.Queries

@inject NavigationManager Nav

<div class="card p-4" style="min-height:90%;">
    <div class="form-group">
        <label>Code</label>
        <InputText class="form-control" @bind-Value="coupon.Code" />
    </div>

    <div class="form-group">
        <label>Discount Type</label>
        <InputSelect class="form-control" @bind-Value="coupon.DiscountType">
            <option value="Fixed">Fixed</option>
            <option value="Percent">Percent</option>
        </InputSelect>
    </div>

    <div class="form-group">
        <label>Discount Value</label>
        <InputNumber class="form-control" @bind-Value="coupon.DiscountValue" />
    </div>

    <div class="form-group">
        <label>Minimum Purchase Amount</label>
        <InputNumber class="form-control" @bind-Value="coupon.MinimumPurchaseAmount" />
    </div>

    <div class="form-group">
        <label>Max Usage Count</label>
        <InputNumber class="form-control" @bind-Value="coupon.MaxUsageCount" />
    </div>

    <div class="form-group">
        <label>Expiry Date</label>
        <InputDate class="form-control" @bind-Value="coupon.ExpiryDate" />
    </div>

    <div class="form-group">
        <InputCheckbox @bind-Value="coupon.IsActive" /> Active
    </div>

    <div class="d-flex">
        <button type="submit" class="btn btn-primary" @onclick="Save">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="GoBack">Cancel</button>
    </div>
</div>

@code {
    [Parameter] public int? CouponId { get; set; }
    private CouponDto coupon = new();

    protected override async Task OnInitializedAsync()
    {
        if (CouponId.HasValue)
        {
            if(CouponId != 0)
            {
                var query = new GetCouponByIdQuery((short)CouponId);
                var result = await _mediator.Send(query);
                if(result.IsSuccess)
                {
                    coupon = result.Data ?? new();
                }
            }
        }
    }

    private async Task Save()
    {
        var command = new CreateCouponCommand()
        {
            Id = coupon.Id,
            Code = coupon.Code,
            DiscountType = (byte)coupon.DiscountType,
            MinimumPurchaseAmount = coupon.MinimumPurchaseAmount,
            DiscountValue = coupon.DiscountValue,
            MaxUsageCount = coupon.MaxUsageCount,
            UsageCount = 0,
            ExpiryDate = coupon.ExpiryDate,
            IsActive = coupon.IsActive,
        };
        UIService.ShowLoader();
        var result = await _mediator.Send(command);
        UIService.HideLoader();

        if(result.IsSuccess)
        {
            await UIService.ShowSuccessAsync("Coupon saved");
            await Task.Delay(100);

            Nav.NavigateTo("/admin/coupons");
        }
        else {
            await UIService.ShowErrorAsync(result.Error);
        }
    }

    void GoBack() => Nav.NavigateTo("/admin/coupons");
}
