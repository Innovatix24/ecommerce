@page "/admin/reports/productwise-sale-report"
@using Application.Features.Categories.DTOs
@using Application.Features.Reports
@using BongoEcom.Components.Common
@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons;
@rendermode InteractiveServer
@inject IDialogService DialogService

@attribute [Authorize(Roles = "Admin,SuperAdmin")]

<div class="card">
    <div class="card-body">
        <div style="display:flex; justify-content:space-between;">
            <h3>Productwise Sale Report</h3>
        </div>

        @if (IsLoading)
        {
            <Loading></Loading>
        }
        else if (Items?.Count == 0)
        {
            <p><em>No items found.</em></p>
        }
        else
        {
            <div style="height:85vh;">
                <FluentDataGrid Items="Items?.AsQueryable()"
                                TGridItem="ProductWiseSaleDto"
                                Pagination="@pagination"
                                RowSize="@rowSize"
                                AutoItemsPerPage="true"
                                Style="overflow-y:hidden;">
                    <TemplateColumn Width="60px" Title="Sl">
                        <p>@(Items?.IndexOf(context) + 1)</p>
                    </TemplateColumn>
                    <PropertyColumn Property="@(c => c.ProductName)" Sortable="true" />
                    <PropertyColumn Property="@(c => c.Qty)" Sortable="true" />
                    <PropertyColumn Property="@(c => c.TotalSale)" Sortable="true" />
                </FluentDataGrid>
                <FluentPaginator State="@pagination" />
            </div>
        }

        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="alert alert-info mt-3">@Message</div>
        }
    </div>
</div>


@code {
    DataGridRowSize rowSize = DataGridRowSize.Medium;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    private List<ProductWiseSaleDto> Items = new();
    private bool IsLoading = true;
    private string Message = string.Empty;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategoriesAsync();
            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadCategoriesAsync()
    {
        IsLoading = true;
        StateHasChanged();
        var result = await _mediator.Send(new GetProductWiseSaleReportQuery(DateOnly.MinValue, DateOnly.FromDateTime(DateTime.Now)));
        if (result.IsSuccess)
        {
            Items = result.Data ?? [];
        }
        else
        {
            Message = result.Error ?? "Failed to load categories.";
        }

        IsLoading = false;
        StateHasChanged();
    }

}

