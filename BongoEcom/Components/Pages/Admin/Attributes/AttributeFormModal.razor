
@using Application.Features.Attributes.Commands
@using Application.Features.Attributes.DTOs
@using Application.Features.Attributes.Queries;
@using BongoEcom.Components.Common
@rendermode InteractiveServer

@inject IDialogService DialogService;

<FluentDialogFooter>
    <FluentButton BackgroundColor="Green" Appearance="Appearance.Accent" OnClick="@(() => HandleValidSubmit())">Save</FluentButton>
</FluentDialogFooter>

<FluentDialogBody>
    <div class="mb-3">
        <FluentCombobox Items=@Groups
                        Width="200px"
                        OptionText="@(i => i.Name)"
                        Label="Outlet"
                        SelectedOption="@group"
                        SelectedOptionChanged="@(async x => SelectAttributeGroup(x))"
                        Height="200px"
                        Disabled=@(Groups == null)
                        Autocomplete="ComboboxAutocomplete.Both"
                        TOption="AttributeGroupDto" />
    </div>
    <div class="mb-3">
        <label for="name" class="form-label">Name</label>
        <InputText id="name" class="form-control" @bind-Value="Content.Name" />
    </div>

    <div class="mb-3">
        <label for="inputType" class="form-label">Input Type</label>
        <InputText id="inputType" class="form-control" @bind-Value="Content.InputType" />
    </div>

    <div class="mb-3">
        <label for="dataType" class="form-label">Data Type</label>
        <InputText id="dataType" class="form-control" @bind-Value="Content.DataType" />
    </div>

    <div>
        <FluentTextField Label="Value"
                         Value="@(Value.Value)"
                         AutoComplete="off"
                         @oninput=@HandleValueInput
                         @onkeyup=@HandleValueKeyUp />
    </div>
        
    <div>
        @foreach(var item in Content.Values){
            <ChipComponent Icon="bi bi-tag" OnRemove="() => RemoveTag(item)">
                @(item.Value)
            </ChipComponent>
        }
    </div>

</FluentDialogBody>


@code {
    AttributeValueDto Value = new();
    List<AttributeValueDto> Values = new();

    private async Task HandleValidSubmit()
    {
        var command = new CreateAttributeCommand
        {
            Id = Content.Id,
            GroupId = Content.GroupId,
            Name = Content.Name,
            Values = Values
        };

        var response = await _mediator.Send(command);

        if (response.IsSuccess)
        {
            await Dialog.CloseAsync("Saved successfully");
            await UIService.ShowSuccessAsync("Saved successfully");
        }
    }

    private void RemoveTag(AttributeValueDto item)
    {
        Values.Remove(item);
    }

    private void HandleValueInput(ChangeEventArgs e)
    {
        if (e.Value is null) return;
        Value.Value = e.Value.ToString() ?? "";
    }
    private void HandleValueKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            Values.Add(Value);
            Value = new();
        }
    }
}
