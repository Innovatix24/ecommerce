@page "/admin/products/edit/{ProductId:int}"
@using Application.Features.Products.Commands
@using Application.Features.Categories.DTOs;
@using Application.Features.Products.DTOs
@using BongoEcom.Components.Common
@using BongoEcom.Components.Inputs

@rendermode InteractiveServer
@inject IDialogService dialogService;
@inject IWebHostEnvironment env
@inject IJSRuntime JS

@attribute [Authorize(Roles = "Admin,SuperAdmin")]

<div style="border-radius: 10px; padding:12px; background-color: white;">
    <div class="container">
        <h3>Edit Product</h3>
        <div class="row p-2">
            <div class="col-md-6">
                <label for="productName" class="form-label">Product Name</label>
                <InputText @bind-Value="Command.Name" id="productName" class="form-control" placeholder="Enter product name" />
            </div>
            <div class="col-md-6">
                <label for="productNameBangla" class="form-label">Product Name (Bangla)</label>
                <InputText @bind-Value="Command.NameBangla" id="productNameBangla" class="form-control" placeholder="Enter product name" />
            </div>
        </div>
        <div class="row p-2">
            <div class="col-md-6">
                <label for="tag" class="form-label">Tag</label>
                <InputText @bind-Value="Command.Tag" id="tag" class="form-control" placeholder="Enter Tag" />
            </div>
            <div class="col-md-3">
                <label for="PurchasePrice" class="form-label">Purchase Price</label>
                <InputNumber @bind-Value="Command.RegularPrice" id="PurchasePrice" class="form-control" placeholder="0.00" />
            </div>
            <div class="col-md-3">
                <label for="price" class="form-label">Sale Price</label>
                <InputNumber @bind-Value="Command.SalePrice" id="price" class="form-control" placeholder="0.00" />
            </div>
        </div>

        <div class="row p-2">
            <div class="col-md-6">
                <FluentCombobox Id="@cmbCategoryId"
                                Items=@_categories
                                OptionText="@(i => i.Name)"
                                Label="Select Category"
                                Height="400px"
                                Width="100%"
                                Disabled=@(_categories is null || _categories.Count == 0)
                                Autocomplete="ComboboxAutocomplete.Both"
                                Multiple="false"
                                @bind-SelectedOption=@Category
                                TOption="CategoryDto" />
            </div>
            <div class="col-md-4">
                <div style="height:30px;"></div>
                <FluentCheckbox @bind-Value="@Command.InStock" Label="In Stock" />
            </div>
        </div>

        <div class="row p-2 mt-2">
            <div class="col-12">
                <div style="display:flex;">
                    <h3>Attributes</h3>
                    <div style="margin-left:12px; margin-top:5px;">
                        <FluentButton IconStart="@(new Icons.Regular.Size16.Add())"
                                      @onclick="@(() => OpenAttributeModal())">Add</FluentButton>
                    </div>
                </div>

                <div>
                    <FluentDataGrid Items="Attributes?.AsQueryable()"
                                    TGridItem="ProductAttributeDto"
                                    RowSize="@rowSize"
                                    AutoItemsPerPage="true"
                                    Style="overflow-y:hidden;">
                        <TemplateColumn Width="60px" Title="Sl">
                            <p>@(Attributes?.IndexOf(context) + 1)</p>
                        </TemplateColumn>
                        <PropertyColumn Property="@(c => c.Name)" Title="Attribute" Sortable="true" />
                        <TemplateColumn Title="Values">
                            <div>
                                @foreach (var value in context.Values)
                                {
                                    <div style="padding:5px; display:inline-block;">
                                        <FluentBadge Appearance="Appearance.Neutral">
                                            @value.Value
                                        </FluentBadge>
                                    </div>
                                }
                            </div>
                        </TemplateColumn>
                        <TemplateColumn Title="Action">
                            <div style="display:flex;">
                                <FluentButton IconEnd="@(new Icons.Regular.Size16.Edit())"
                                              Title="Edit"
                                              OnClick="@(async () => await EditAttribute(context))" />
                                <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())"
                                              Title="Delete"
                                              Color="Color.Error"
                                              OnClick="@(() => DeleteAttribute(context))" />
                            </div>
                        </TemplateColumn>
                    </FluentDataGrid>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <label class="form-label">Product Images</label>
                @if (Product.Images.Any())
                {
                    <div class="d-flex flex-wrap gap-3 mt-2">
                        @foreach (var img in Product.Images)
                        {
                            <div class="position-relative border rounded p-1" style="width: 100px;">
                                <img src="@img.Url" class="img-thumbnail" style="width: 100%; height: 100px; object-fit: cover;" />
                                <button type="button"
                                class="btn-close btn-sm position-absolute top-0 end-0"
                                @onclick="@(() => RemoveImage(img))"
                                title="Remove"></button>
                            </div>
                        }
                    </div>
                }
                <ImageInputComponent OnFilesChanged="HandleImagesUploaded" />
            </div>
        </div>

        <div class="mb-4 p-2">
            <h3>Short Description</h3>
            <SummernoteEditor @bind-Value="@Command.ShortDescription" />
        </div>
        <div class="mb-4 p-2">
            <h3>Description</h3>
            <SummernoteEditor @bind-Value="@Command.Description" />
        </div>

        <div class="row mt-3">
            <div class="col-12">
                <label class="form-label">Specifications</label>
                <div class="row g-2 mb-2">
                    <div class="col-md-5">
                        <InputText class="form-control" @bind-Value="specKey" placeholder="Specification Name" />
                    </div>
                    <div class="col-md-5">
                        <InputText class="form-control" @bind-Value="specValue" placeholder="Specification Value" />
                    </div>
                    <div class="col-md-2">
                        <button type="button" class="btn btn-success w-100" @onclick="AddSpecification">Add</button>
                    </div>
                </div>

                @if (Command.Specifications?.Count > 0)
                {
                    <table class="table table-sm table-striped">
                        <thead>
                            <tr>
                                <th>Key</th>
                                <th>Value</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var spec in Command.Specifications)
                            {
                                <tr>
                                    <td>@spec.Key</td>
                                    <td>@spec.Value</td>
                                    <td>
                                        <button type="button" class="btn btn-danger btn-sm" @onclick="@(() => RemoveSpecification(spec))">Remove</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p><em>No specifications added yet.</em></p>
                }
            </div>
        </div>

        <div class="row mt-4">
            <div class="col-12 text-end">
                <button @onclick="HandleSubmit" type="submit" class="btn btn-primary">Update</button>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter] public int ProductId { get; set; }

    static string cmbCategoryId = Identifier.NewId();
    private UpdateProductCommand Command = new();                                                                                                                    
    private CategoryDto Category { get; set; } = new();

    private MyTextEditor editor;
    private MyTextEditor shortEditor;

    DataGridRowSize rowSize = DataGridRowSize.Medium;
    private List<IBrowserFile> uploadedImages = new();

    private void HandleImagesUploaded(List<IBrowserFile> files)
    {
        uploadedImages = files;
    }

    
    

    private string specKey = "";
    private string specValue = "";

    private void AddSpecification()
    {
        if (!string.IsNullOrWhiteSpace(specKey) && !string.IsNullOrWhiteSpace(specValue))
        {
            Command.Specifications ??= new List<ProductSpecificationDto>();
            Command.Specifications.Add(new ProductSpecificationDto
                {
                    Key = specKey,
                    Value = specValue
                });

            specKey = "";
            specValue = "";
        }
    }

    private void RemoveSpecification(ProductSpecificationDto spec)
    {
        Command.Specifications?.Remove(spec);
    }

    private async Task RemoveImage(ProductImageDto image)
    {
        var confirmed = await UIService.ShowConfirmationAsync("Delete", "Are you sure to remove this image");

        if(confirmed)
        {
            Product.Images.Remove(image);
            var command = new DeleteProductImageCommand(image.Id);
            var response = await _mediator.Send(command);
            if(response.IsSuccess)
            {
                var relativePath = image.Url.TrimStart('/');
                var fullPath = Path.Combine(env.WebRootPath, relativePath);

                if (System.IO.File.Exists(fullPath))
                {
                    System.IO.File.Delete(fullPath);
                    Console.WriteLine($"Deleted: {fullPath}");
                }
                else
                {
                    Console.WriteLine($"File not found: {fullPath}");
                }
            }
        }
    }
}
