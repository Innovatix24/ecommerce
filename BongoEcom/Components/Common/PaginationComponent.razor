

@if (TotalPages > 1)
{
    <nav aria-label="Page navigation">
        <ul class="pagination">
            <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                <button type="button" class="page-link" @onclick="async () => await GoToPage(1)"
                @onclick:preventDefault aria-label="First">
                    <span aria-hidden="true">&laquo;&laquo;</span>
                </button>
            </li>
            <li class="page-item @(CurrentPage == 1 ? "disabled" : "")">
                <button type="button" class="page-link" @onclick="async () => await GoToPage(CurrentPage - 1)"
                @onclick:preventDefault aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                </button>
            </li>

            @for (int i = StartPage; i <= EndPage; i++)
            {
                var pageNumber = i; // 💥 this breaks the closure issue
                <li class="page-item @(pageNumber == CurrentPage ? "active" : "")">
                    <button type="button" class="page-link"
                            @onclick="async () => await GoToPage(pageNumber)"
                    @onclick:preventDefault>
                        @pageNumber
                    </button>
                </li>
            }

            <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                <button type="button" class="page-link" @onclick="async () => await GoToPage(CurrentPage + 1)"
                @onclick:preventDefault aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                </button>
            </li>
            <li class="page-item @(CurrentPage == TotalPages ? "disabled" : "")">
                <button type="button" class="page-link" @onclick="async () => await GoToPage(TotalPages)"
                @onclick:preventDefault aria-label="Last">
                    <span aria-hidden="true">&raquo;&raquo;</span>
                </button>
            </li>
        </ul>
    </nav>
}

@code {
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int PageSize { get; set; } = 10;
    [Parameter] public int TotalCount { get; set; }
    [Parameter] public int VisiblePages { get; set; } = 5;
    [Parameter] public EventCallback<int> PageChanged { get; set; }

    private int TotalPages => (int)Math.Ceiling(TotalCount / (double)PageSize);
    private int StartPage => Math.Max(1, CurrentPage - (VisiblePages / 2));
    private int EndPage => Math.Min(TotalPages, StartPage + VisiblePages - 1);

    private async Task GoToPage(int page)
    {
        if (page < 1 || page > TotalPages) return;
        await PageChanged.InvokeAsync(page);
    }
}