@using Application.Features.CompanyInfoes.Queries
@using BongoEcom.Components.Pages.Web.Cart
@using BongoEcom.Services
@using Microsoft.AspNetCore.Components.Authorization

@rendermode InteractiveServer

@inject ProductFilterService FilterService
@inject CartService CartService
@* @inject IDialogService dialogService; *@
@implements IDisposable

@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject CompanyInfoService companyService

<style>
    .top-bar {
    background-color: #f8f9fa;
    padding: 10px 0;
    }
</style>

<div class="top-bar d-flex justify-content-between align-items-center px-3">
    <div class="d-flex align-items-center px-3">
        <img src="@CompanyInfo?.LogoUrl" alt="Innovatix" style="height: 40px; margin-right:12px;">
        <div>
            <h4>@CompanyInfo?.CompanyName</h4>
        </div>
    </div>
    <div class="input-group" style="width:350px;">
        <input @onchange="OnSearchChanged" @onkeyup="OnSearchKeyUp" type="text" class="form-control" placeholder="Search">
        <button @onclick=HandleSearch class="btn btn-danger"><i class="fas fa-search"></i>Search</button>
    </div>
    <div class="d-flex align-items-center gap-2">
        <button @onclick="@(() => PlaceOrder())" class="btn btn-outline-danger">ORDER NOW</button>
        
        <WebTopBar></WebTopBar>

        <button @onclick="@(() => ShowModal())" class="btn btn-outline-dark cart-btn">
            <i class="fas fa-shopping-cart" style="color:darkorange"></i> ৳ @(CartService.GetTotalPrice())
        </button>
    </div>
</div>

<div class="modal fade" id="myModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Cart</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <CartComponent></CartComponent>
            </div>
        </div>
    </div>
</div>

@code {
    // CompanyInfoDto CompanyInfo = new();
    [Parameter] public CompanyInfoDto? CompanyInfo { get; set; }
    bool rendered = false;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            // await companyService.Load();
            // CompanyInfo = companyService.CompanyInfo ?? new();

            var auth = await AuthStateProvider.GetAuthenticationStateAsync();

            StateHasChanged();
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    string searchKey = "";

    private void OnSearchChanged(ChangeEventArgs args)
    {
        if(args.Value is null)
        {
            searchKey = "";
        }
        else
        {
            searchKey = args.Value.ToString();
        }
    }

    private async void OnSearchKeyUp(KeyboardEventArgs args)
    {
        if (string.IsNullOrEmpty(searchKey) || searchKey.Length > 1)
        {
            await HandleSearch();
        }
    }

    private async Task HandleSearch()
    {
        await FilterService.HandleSearch(searchKey);
    }

    protected override void OnInitialized()
    {
        CartService.OnChange += StateHasChanged;
        Auth.OnChange += StateHasChanged;

        currentUrl = Navigation.ToBaseRelativePath(Navigation.Uri);
        Navigation.LocationChanged += OnLocationChanged;
    }

    public void Dispose()
    {
        CartService.OnChange -= StateHasChanged;
        Auth.OnChange -= StateHasChanged;
        Navigation.LocationChanged -= OnLocationChanged;
    }

    private async Task ShowModal()
    {
        await JS.InvokeVoidAsync("bootstrapInterop.showModal", "#myModal");
    }

    private async void PlaceOrder()
    {
        Navigation.NavigateTo("/checkout");
    }

    private string? currentUrl;


    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = Navigation.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

}
